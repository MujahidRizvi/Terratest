trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  TEST_ROOT: 'Digital Architecture/tests'
  REPORT_DIR: '$(TEST_ROOT)/reports'

steps:
- task: UseGoVersion@0
  inputs:
    version: '1.21'

- task: TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'

- script: |
    sudo apt-get update
    sudo apt-get install -y golang-golang-x-tools  # provides go-junit-report
    mkdir -p "$(REPORT_DIR)"
    cd "$(TEST_ROOT)"
    # Initialize modules if not already done
    find . -name 'go.mod' -execdir go mod tidy \;
    # Run all test files recursively
    find . -name '*_test.go' -exec dirname {} \; | sort -u | while read dir; do
      (cd "$dir" && go test -v -timeout 30m ./... || true)
    done | tee "$(REPORT_DIR)/result.txt" | go-junit-report > "$(REPORT_DIR)/junit-report.xml"
  displayName: 'Run All Go Tests and Generate JUnit Report'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '$(REPORT_DIR)/junit-report.xml'
    testRunTitle: 'Terraform Terratest Results'
  condition: succeededOrFailed()
